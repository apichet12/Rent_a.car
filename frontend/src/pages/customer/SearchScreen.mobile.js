// src/components/SearchScreenMobile.js
import React, { useState, useEffect, useRef } from 'react';
import { Bell } from 'lucide-react';
import { Link } from 'react-router-dom';
import './SearchScreenMobile.css';

const MENU_ITEMS = [
  { title: '‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ', subs: ['‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', '‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡πÄ‡∏ä‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö', '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'] },
  { title: '‡πÄ‡∏ä‡πà‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå', subs: ['‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô', '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏™‡∏Å‡∏π‡πä‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', '‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°'] },
  { title: '‡∏ï‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ô', subs: ['‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©', '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏ï‡∏¥‡∏ß‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤', '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå'] },
  { title: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', subs: ['‡∏ä‡πà‡∏≤‡∏á‡∏ã‡πà‡∏≠‡∏°', '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á', '‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î', '‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô'] },
  { title: '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£', subs: ['‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£', '‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ó‡πå'] },
];

const SearchScreenMobile = () => {
  const [query, setQuery] = useState('');
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [expandedMenu, setExpandedMenu] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
  const inputRef = useRef(null);

  const phrasesRef = useRef([
    "‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ...",
    "‡πÄ‡∏ä‡πà‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå‡∏™‡∏∞‡∏î‡∏ß‡∏Å...",
    "‡∏ï‡∏¥‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå..."
  ]);

  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);
  const [displayedText, setDisplayedText] = useState('');
  const [isDeleting, setIsDeleting] = useState(false);

  // ================== Typewriter Effect ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ==================
  useEffect(() => {
    let charIndex = 0;
    let timeout;

    const type = () => {
      const currentPhrase = phrasesRef.current[currentPhraseIndex];

      if (!isDeleting) {
        setDisplayedText(currentPhrase.substring(0, charIndex + 1));
        charIndex++;
        if (charIndex === currentPhrase.length) {
          setIsDeleting(true);
        }
      } else {
        setDisplayedText(currentPhrase.substring(0, charIndex - 1));
        charIndex--;
        if (charIndex === 0) {
          setIsDeleting(false);
          setCurrentPhraseIndex((prev) => (prev + 1) % phrasesRef.current.length);
        }
      }

      timeout = setTimeout(type, isDeleting ? 50 : 100); // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå / ‡∏•‡∏ö
    };

    type();
    return () => clearTimeout(timeout);
  }, [currentPhraseIndex, isDeleting]);
  // ==================================================================

  const doSearch = () => {
    if (!query) return;
    console.log('Searching:', query);
  };

  const handleNotification = () => {
    console.log('Notification clicked!');
  };

  const toggleMobileMenu = () => setIsMobileMenuOpen(prev => !prev);
  const closeMobileMenu = () => setIsMobileMenuOpen(false);

  const toggleMenuSection = (index) => {
    setExpandedMenu(prev => (prev === index ? null : index));
  };

  return (
    <div className="search-mobile">
      {/* Header ‡πÇ‡∏•‡πÇ‡∏Å‡πâ + ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡πá‡∏ö + notification */}
      <div className="search-header">
        <div className="logo-name">
          <img src="/logo192.png" alt="Logo" className="logo" />
          <span className="site-name">Klick Drive</span>
        </div>
        <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>
          <button className="notification-btn" onClick={handleNotification}>
            <Bell size={28} />
          </button>
          <button className="navbar-hamburger" onClick={toggleMobileMenu}>‚ò∞</button>
        </div>
      </div>

      {/* ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á */}
      <div className="typewriter-text">
        {displayedText}
        <span className="cursor">|</span>
      </div>

      {/* Search Pill */}
      <div className="search-pill">
        <span className="pill-icon" onClick={doSearch}>üîç</span>
        <input
          type="text"
          className="pill-input"
          value={query}
          onChange={e => setQuery(e.target.value)}
          onKeyDown={e => e.key === 'Enter' && doSearch()}
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏£‡∏µ‡πÅ‡∏•‡∏ô‡∏ã‡πå..."
          ref={inputRef}
        />
      </div>

      {/* Mobile Menu Drawer */}
      <div className={`mobile-menu ${isMobileMenuOpen ? 'open' : ''}`} onClick={closeMobileMenu}>
        <div className="mobile-menu-inner" onClick={e => e.stopPropagation()}>
          <div className="mobile-menu-top">
            <Link to="/" className="navbar-brand" onClick={closeMobileMenu}>
              <img src="/logo192.png" alt="Logo" style={{ width: 32, height: 32 }} />
              <span>Klick Drive</span>
            </Link>
            <button className="navbar-hamburger" onClick={closeMobileMenu}>‚úï</button>
          </div>

          <div className="mobile-menu-links">
            {MENU_ITEMS.map((m, index) => (
              <div key={index} className="mobile-menu-section">
                <button
                  className="mobile-menu-section-title"
                  onClick={() => toggleMenuSection(index)}
                  style={{ display: 'flex', justifyContent: 'space-between', width: '100%', background: 'none', border: 'none', cursor: 'pointer', padding: '8px 0' }}
                >
                  {m.title} <span>{expandedMenu === index ? '‚ñ¥' : '‚ñæ'}</span>
                </button>
                {expandedMenu === index && (
                  <div className="mobile-menu-section-items">
                    {m.subs.map((s, si) => (
                      <Link key={si} className="mobile-menu-link" to={`/cars?q=${encodeURIComponent(s)}`} onClick={closeMobileMenu}>
                        {s}
                      </Link>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default SearchScreenMobile;
