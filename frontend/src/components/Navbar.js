import React, { useContext, useState, useEffect } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';
import './Navbar.css';

// Constants for the typing effect
const PLACEHOLDERS = [
    "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏î‡∏µ...",
    "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå SUV 7 ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á...",
    "‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏°.‡∏õ‡∏•‡∏≤‡∏¢...",
    "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå...",
    "‡∏ï‡∏¥‡∏ß‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏≤‡∏•‡∏±‡∏¢...",
];
const TYPING_SPEED = 100; // Speed of character appearance (ms)
const DELETING_SPEED = 50;  // Speed of character disappearance (ms)
const PAUSE_DURATION = 1500; // Pause duration after typing (ms)


const NavbarLogin = () => {
    const { user, logout } = useContext(AuthContext);
    const [query, setQuery] = useState('');
    const [showFullNav, setShowFullNav] = useState(false);
    const navigate = useNavigate();
    const location = useLocation();

    // State for Typewriter Effect
    const [placeholderIndex, setPlaceholderIndex] = useState(0);
    const [displayedPlaceholder, setDisplayedPlaceholder] = useState('');
    const [isDeleting, setIsDeleting] = useState(false);

    // Effect for Typewriter Placeholder Animation
    useEffect(() => {
        const fullText = PLACEHOLDERS[placeholderIndex % PLACEHOLDERS.length];
        let timer;

        if (isDeleting) {
            // DELETING phase: remove characters
            timer = setTimeout(() => {
                setDisplayedPlaceholder(prev => prev.substring(0, prev.length - 1));
            }, DELETING_SPEED);

            if (displayedPlaceholder === '') {
                // Finished deleting, switch to typing the next phrase
                setIsDeleting(false);
                setPlaceholderIndex(prev => prev + 1);
            }
        } else {
            // TYPING phase: add characters
            timer = setTimeout(() => {
                setDisplayedPlaceholder(prev => fullText.substring(0, prev.length + 1));
            }, TYPING_SPEED);

            if (displayedPlaceholder === fullText) {
                // Finished typing, start pause before deleting
                clearTimeout(timer);
                timer = setTimeout(() => setIsDeleting(true), PAUSE_DURATION);
            }
        }

        return () => clearTimeout(timer);
    }, [displayedPlaceholder, isDeleting, placeholderIndex]);


    // reveal navbar search and bottom row after user scrolls past the hero search pill
    useEffect(() => {
        // If we're not on the home page, keep the full navbar visible immediately.
        if (location.pathname && location.pathname !== '/') {
            setShowFullNav(true);
            return;
        }

        // On the home page: reveal after scrolling past the hero search pill.
        const hero = document.querySelector('.hero-search-pill');
        let threshold = 220;
        if (hero) {
            const rect = hero.getBoundingClientRect();
            threshold = window.scrollY + rect.top + rect.height;
        }
        // Set threshold slightly lower than the calculated position for a smoother reveal
        const onScroll = () => setShowFullNav(window.scrollY > threshold - 80); 
        window.addEventListener('scroll', onScroll, { passive: true });
        
        // run once on mount
        onScroll(); 
        
        return () => window.removeEventListener('scroll', onScroll);
    }, [location.pathname]);

    const doSearch = () => {
        if (!query) return navigate('/cars');
        navigate(`/cars?q=${encodeURIComponent(query)}`);
    };

    return (
        <nav className={`navbar ${showFullNav ? 'expanded' : 'collapsed'}`}>
            <div className="navbar-row navbar-top">
                <div className="navbar-left">
                    <Link to="/" className="navbar-brand">
                        <img src="/logo192.png" alt="Logo" style={{ width: 40, height: 40 }} />
                        <span>Klick Drive</span>
                    </Link>
                </div>

                <div className="navbar-search search-pill">
                    <div className="pill-content">
                        <div className="search-icon">‚ú®</div>
                        <input
                            className="pill-input navbar-search-input"
                            placeholder={displayedPlaceholder || PLACEHOLDERS[0]} /* Use dynamic placeholder */
                            value={query}
                            onChange={e => setQuery(e.target.value)}
                            onKeyDown={e => e.key === 'Enter' && doSearch()}
                        />
                        <button className="pill-go" onClick={doSearch}>AI Search üîç</button>
                    </div>
                </div>

                <div className="navbar-contact" style={{ marginLeft: 'auto' }}>
                    {user ? (
                        <>
                            <span>{user.username}</span>
                            <button className="navbar-link" onClick={logout}>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
                        </>
                    ) : (
                        <Link to="/login" className="navbar-link">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö üîë</Link>
                    )}
                </div>
            </div>

            <div className="navbar-row navbar-bottom">
                <div className="navbar-links">
                    <div className="navbar-topmenu">
                        {/* Category-driven navbar: text-only items with rich submenus */}
                        {[
                            { title: '‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ', subs: ['‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô','‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô','‡πÄ‡∏ä‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö','‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß','‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à','‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤'] },
                            { title: '‡πÄ‡∏ä‡πà‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ä‡∏Ñ‡πå', subs: ['‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô','‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß','‡∏™‡∏Å‡∏π‡πä‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤','‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°'] },
                            { title: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©', subs: ['‡∏ï‡∏¥‡∏ß‡∏Ñ‡∏ì‡∏¥‡∏ï','‡∏ï‡∏¥‡∏ß‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©','‡∏ï‡∏¥‡∏ß‡∏ß‡∏¥‡∏ó‡∏¢‡πå','‡∏ï‡∏¥‡∏ß‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤','‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå'] },
                            { title: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', subs: ['‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á','‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á','‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î','‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô'] },
                            { title: '‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£', subs: ['‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£','‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô','‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ó‡πå'] }
                        ].map((m, mi) => (
                            <div key={mi} className="menu-item dropdown hover-dropdown">
                                <button className="dropdown-toggle">{m.title} ‚ñæ</button>
                                <div className="dropdown-menu multi-col">
                                    {m.subs.map((s, si) => (
                                        <Link key={si} className="dropdown-item" to={`/cars?q=${encodeURIComponent(s)}`}>{s}</Link>
                                    ))}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>

                <div className="navbar-quicklinks">
                    <button className="btn-outline" onClick={() => navigate('/cars?type=car')}>‡πÄ‡∏ä‡πà‡∏≤‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå</button>
                    <button className="btn-outline" onClick={() => navigate('/cars?type=bike')}>‡πÄ‡∏ä‡πà‡∏≤‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ä‡∏Ñ‡πå</button>
                    <button className="btn-outline" onClick={() => navigate('/cars?type=special')}>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© / ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°</button>
                </div>
            </div>
        </nav>
    );
};

export default NavbarLogin;
